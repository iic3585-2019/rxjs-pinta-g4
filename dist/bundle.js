/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var canvas = document.getElementById('canvas');
var context = canvas.getContext('2d');
var HEIGHT = canvas.height;
var WIDTH = canvas.width;

var add = function add(a1, a2) {
  array = new Array();
  a1.forEach(function (a, i) {
    return array.push(a + a2[i]);
  });
  return array;
};

// Wall const
var WALL_WIDTH = 20;
var WALL_HEIGHT = 100;
var WALL_COLOR = "gray";
// Ball const
var BALL_RADIUS = 10;
var BALL_A_COLOR = "red";
var BALL_A_ORIGIN = [50, 50];
var BALL_B_COLOR = "blue";
var BALL_B_ORIGIN = [200, 200];
var BALL_SPEED = 10;

var directions = {
  UP: [0, -BALL_SPEED],
  DOWN: [0, BALL_SPEED],
  LEFT: [-BALL_SPEED, 0],
  RIGHT: [BALL_SPEED, 0],
  NONE: [0, 0]

  // Keys
};var A_KEYS = { // asdw
  up: 87,
  down: 83,
  left: 65,
  right: 68
};
var B_KEYS = { // arrows
  up: 38,
  down: 40,
  left: 37,
  right: 39
};
var PAUSE_KEY = 80; // p

var WALLS = [{ x: 20, y: 100, width: WALL_WIDTH, height: WALL_HEIGHT }, { x: 80, y: 10, width: WALL_WIDTH, height: WALL_HEIGHT }, { x: 300, y: 160, width: WALL_WIDTH, height: WALL_HEIGHT }, { x: 200, y: 480, width: WALL_HEIGHT, height: WALL_WIDTH }, { x: 450, y: 220, width: WALL_WIDTH, height: WALL_HEIGHT }, { x: 320, y: 100, width: WALL_HEIGHT, height: WALL_WIDTH }];

//Falta definir atributos bolas (posicion, direccion, color)
var BALL_A = {
  pos: BALL_A_ORIGIN,
  color: BALL_A_COLOR,
  mov: 'NONE'
};

var BALL_B = {
  pos: BALL_B_ORIGIN,
  color: BALL_B_COLOR,
  mov: 'NONE'
};

var BALLS = [BALL_A, BALL_B];

var state = {
  balls: BALLS,
  walls: WALLS
};

function drawBall(ball) {
  context.beginPath();
  context.arc(ball.pos[0], ball.pos[1], BALL_RADIUS, 0, Math.PI * 2);
  context.fillStyle = ball.color;
  context.fill();
  context.closePath();
}

function drawBalls(balls) {
  balls.forEach(function (ball) {
    return drawBall(ball);
  });
}

function drawWall(wall) {
  context.beginPath();
  context.rect(wall.x, wall.y, wall.width, wall.height);
  context.fillStyle = WALL_COLOR;
  context.fill();
  context.closePath();
}

function drawWalls(walls) {
  walls.forEach(function (wall) {
    return drawWall(wall);
  });
}

function draw(state) {
  context.fillStyle = "#639fff";
  context.fillRect(0, 0, canvas.width, canvas.height);
  drawWalls(state.walls);
  drawBalls(state.balls);
}

function moveBalls(state, event) {
  switch (event.key) {
    case 'w':case 'a':case 's':case 'd':
      moveBall(state.balls[0], event.key);break;
    case 'ArrowUp':case 'ArrowDown':case 'ArrowRight':case 'ArrowLeft':
      moveBall(state.balls[1], event.key);break;
  }
}

function redraw(state) {
  context.clearRect(0, 0, canvas.width, canvas.height);
  draw(state);
}

function moveBall(ball, direction) {
  switch (direction) {
    case 'ArrowUp':case 'w':
      ball.mov = 'UP';break;
    case 'ArrowDown':case 's':
      ball.mov = 'DOWN';break;
    case 'ArrowLeft':case 'a':
      ball.mov = 'LEFT';break;
    case 'ArrowRight':case 'd':
      ball.mov = 'RIGHT';break;
  }
}

function wallCollide(w, b) {
  if (b[0] >= w.x && b[0] <= w.x + w.width && b[1] >= w.y && b[1] <= w.y + w.height) {

    return true;
  }
  return false;
}

function checkWalls(b) {
  if (b.pos[0] < 0) {
    b.pos[0] = WIDTH;
  }
  if (b.pos[0] > WIDTH) {
    b.pos[0] = 0;
  }
  if (b.pos[1] < 0) {
    b.pos[1] = HEIGHT;
  }
  if (b.pos[1] > HEIGHT) {
    b.pos[1] = 0;
  }

  // state.walls.forEach(w => {
  //   if(b.pos[0] > w.x && b.pos[0] < w.x+w.width &&
  //     b.pos[1] > w.y && b.pos[1] < w.y + w.height){
  //     b.mov = 'NONE';
  //   }
  // });
}

function receiveInputs() {
  // const upKeys = Rx.Observable.fromEvent(document, 'keyup');
  var downKeys = Rx.Observable.fromEvent(document, 'keydown');
  // const keysPressed = new Rx.Subject();
  // upKeys.subscribe(keysPressed);
  downKeys.subscribe(function (event) {
    return moveBalls(state, event);
  });

  // keysPressed.subscribe(event => moveBalls(BALLS, event));
}

function timeFlow(state) {
  state.balls.forEach(function (b) {
    var test = add(b.pos, directions[b.mov]);
    var pass = true;
    state.walls.forEach(function (w) {
      if (wallCollide(w, test)) {
        pass = false;b.mov = 'NONE';
      }
    });
    if (pass) {
      b.pos = test;
      checkWalls(b);
    }
  });
  redraw(state);
}

receiveInputs();
draw(state);

setInterval(timeFlow, 60, state);

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,